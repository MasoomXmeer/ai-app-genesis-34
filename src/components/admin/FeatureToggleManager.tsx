import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { 
  ToggleLeft,
  ToggleRight,
  Eye,
  EyeOff,
  Zap,
  Shield,
  Users,
  Globe,
  Code,
  Cpu,
  Database,
  GitBranch,
  Bot,
  CreditCard,
  Mail,
  Bell,
  Settings,
  Save
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface FeatureFlag {
  id: string;
  name: string;
  description: string;
  enabled: boolean;
  category: 'core' | 'ai' | 'integration' | 'payment' | 'security' | 'experimental';
  icon: any;
  dependencies?: string[];
  configurable: boolean;
  config?: Record<string, any>;
}

const FeatureToggleManager = () => {
  const { toast } = useToast();
  const [features, setFeatures] = useState<FeatureFlag[]>([
    {
      id: 'code-generation',
      name: 'AI Code Generation',
      description: 'Enable AI-powered code generation with multiple providers',
      enabled: true,
      category: 'core',
      icon: Code,
      configurable: true,
      config: {
        maxConcurrentJobs: 5,
        defaultModel: 'gpt-4',
        timeoutSeconds: 300
      }
    },
    {
      id: 'live-compilation',
      name: 'Live Code Compilation',
      description: 'Compile and execute generated code in real-time',
      enabled: false,
      category: 'core',
      icon: Cpu,
      dependencies: ['code-generation'],
      configurable: true,
      config: {
        dockerEnabled: false,
        memoryLimit: '512MB',
        timeoutSeconds: 30
      }
    },
    {
      id: 'github-integration',
      name: 'GitHub Integration',
      description: 'Automatically push generated code to GitHub repositories',
      enabled: false,
      category: 'integration',
      icon: GitBranch,
      configurable: true,
      config: {
        autoCommit: true,
        defaultBranch: 'main',
        commitMessage: 'Generated by AI Builder'
      }
    },
    {
      id: 'ai-chat-assistant',
      name: 'AI Chat Assistant',
      description: 'Interactive AI assistant for project guidance',
      enabled: true,
      category: 'ai',
      icon: Bot,
      configurable: true,
      config: {
        model: 'gpt-4',
        maxTokens: 2000,
        temperature: 0.7
      }
    },
    {
      id: 'real-time-preview',
      name: 'Real-time Preview',
      description: 'Live preview of generated applications',
      enabled: true,
      category: 'core',
      icon: Eye,
      dependencies: ['code-generation'],
      configurable: false
    },
    {
      id: 'multi-user-collaboration',
      name: 'Multi-user Collaboration',
      description: 'Real-time collaboration features for teams',
      enabled: false,
      category: 'core',
      icon: Users,
      configurable: true,
      config: {
        maxUsers: 10,
        sessionTimeout: 3600
      }
    },
    {
      id: 'database-integration',
      name: 'Database Integration',
      description: 'Connect and manage databases for generated applications',
      enabled: false,
      category: 'integration',
      icon: Database,
      configurable: true,
      config: {
        supportedDatabases: ['postgresql', 'mysql', 'mongodb'],
        connectionTimeout: 5000
      }
    },
    {
      id: 'payment-processing',
      name: 'Payment Processing',
      description: 'Integrate payment gateways into generated applications',
      enabled: false,
      category: 'payment',
      icon: CreditCard,
      configurable: true,
      config: {
        defaultCurrency: 'USD',
        supportedGateways: ['stripe', 'paypal', 'square']
      }
    },
    {
      id: 'security-scanning',
      name: 'Security Scanning',
      description: 'Automated security vulnerability scanning',
      enabled: false,
      category: 'security',
      icon: Shield,
      configurable: true,
      config: {
        scanLevel: 'medium',
        autoFix: false
      }
    },
    {
      id: 'email-notifications',
      name: 'Email Notifications',
      description: 'Send email notifications for project updates',
      enabled: false,
      category: 'integration',
      icon: Mail,
      configurable: true,
      config: {
        smtpHost: '',
        smtpPort: 587,
        fromEmail: 'noreply@aibuilder.com'
      }
    },
    {
      id: 'advanced-analytics',
      name: 'Advanced Analytics',
      description: 'Detailed usage analytics and performance metrics',
      enabled: false,
      category: 'experimental',
      icon: Bell,
      configurable: true,
      config: {
        dataRetentionDays: 90,
        realTimeEnabled: true
      }
    },
    {
      id: 'api-marketplace',
      name: 'API Marketplace',
      description: 'Browse and integrate third-party APIs',
      enabled: false,
      category: 'experimental',
      icon: Globe,
      configurable: false
    }
  ]);

  const [selectedFeature, setSelectedFeature] = useState<FeatureFlag | null>(null);

  const toggleFeature = (featureId: string) => {
    setFeatures(prev => prev.map(feature => {
      if (feature.id === featureId) {
        const newEnabled = !feature.enabled;
        
        // Check dependencies
        if (newEnabled && feature.dependencies) {
          const missingDeps = feature.dependencies.filter(depId => 
            !prev.find(f => f.id === depId)?.enabled
          );
          
          if (missingDeps.length > 0) {
            toast({
              title: "Cannot Enable Feature",
              description: `This feature requires: ${missingDeps.join(', ')}`,
              variant: "destructive",
            });
            return feature;
          }
        }
        
        // Disable dependent features if disabling this one
        if (!newEnabled) {
          const dependentFeatures = prev.filter(f => 
            f.dependencies?.includes(featureId) && f.enabled
          );
          
          if (dependentFeatures.length > 0) {
            toast({
              title: "Dependent Features Disabled",
              description: `Disabled: ${dependentFeatures.map(f => f.name).join(', ')}`,
            });
          }
        }
        
        return { ...feature, enabled: newEnabled };
      }
      
      // Disable dependent features
      if (feature.dependencies?.includes(featureId) && !prev.find(f => f.id === featureId)?.enabled) {
        return { ...feature, enabled: false };
      }
      
      return feature;
    }));
    
    toast({
      title: "Feature Updated",
      description: `Feature has been ${features.find(f => f.id === featureId)?.enabled ? 'disabled' : 'enabled'}`,
    });
  };

  const updateFeatureConfig = (featureId: string, config: Record<string, any>) => {
    setFeatures(prev => prev.map(feature => 
      feature.id === featureId ? { ...feature, config } : feature
    ));
  };

  const saveConfiguration = () => {
    localStorage.setItem('featureFlags', JSON.stringify(features));
    toast({
      title: "Configuration Saved",
      description: "Feature flags have been saved successfully.",
    });
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'core': return 'bg-blue-500/10 text-blue-700 border-blue-200';
      case 'ai': return 'bg-purple-500/10 text-purple-700 border-purple-200';
      case 'integration': return 'bg-green-500/10 text-green-700 border-green-200';
      case 'payment': return 'bg-yellow-500/10 text-yellow-700 border-yellow-200';
      case 'security': return 'bg-red-500/10 text-red-700 border-red-200';
      case 'experimental': return 'bg-orange-500/10 text-orange-700 border-orange-200';
      default: return 'bg-gray-500/10 text-gray-700 border-gray-200';
    }
  };

  const groupedFeatures = features.reduce((acc, feature) => {
    if (!acc[feature.category]) {
      acc[feature.category] = [];
    }
    acc[feature.category].push(feature);
    return acc;
  }, {} as Record<string, FeatureFlag[]>);

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-foreground">Feature Toggle Manager</h2>
          <p className="text-muted-foreground">Enable or disable platform features and configure their settings</p>
        </div>
        <Button onClick={saveConfiguration} className="gradient-primary">
          <Save className="h-4 w-4 mr-2" />
          Save Configuration
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Feature List */}
        <div className="lg:col-span-2 space-y-6">
          {Object.entries(groupedFeatures).map(([category, categoryFeatures]) => (
            <Card key={category} className="bg-card/50 backdrop-blur-sm border-primary/10">
              <CardHeader>
                <CardTitle className="capitalize">{category} Features</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {categoryFeatures.map((feature) => {
                  const IconComponent = feature.icon;
                  const isDependent = feature.dependencies?.some(depId => 
                    !features.find(f => f.id === depId)?.enabled
                  );
                  
                  return (
                    <div 
                      key={feature.id}
                      className={`flex items-center justify-between p-4 bg-muted/30 rounded-lg border transition-colors cursor-pointer ${
                        selectedFeature?.id === feature.id 
                          ? 'border-primary/50 bg-primary/5' 
                          : 'border-primary/10 hover:border-primary/20'
                      }`}
                      onClick={() => setSelectedFeature(feature)}
                    >
                      <div className="flex items-start space-x-3 flex-1">
                        <div className="bg-primary/10 p-2 rounded-lg">
                          <IconComponent className="h-4 w-4 text-primary" />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-1">
                            <h3 className="font-medium text-foreground">{feature.name}</h3>
                            <Badge className={getCategoryColor(feature.category)}>
                              {feature.category}
                            </Badge>
                            {isDependent && (
                              <Badge variant="outline" className="text-xs">
                                Requires Dependencies
                              </Badge>
                            )}
                          </div>
                          <p className="text-sm text-muted-foreground">{feature.description}</p>
                          {feature.dependencies && (
                            <p className="text-xs text-muted-foreground mt-1">
                              Depends on: {feature.dependencies.join(', ')}
                            </p>
                          )}
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        {feature.configurable && (
                          <Button variant="ghost" size="sm" className="hover:bg-primary/10">
                            <Settings className="h-4 w-4" />
                          </Button>
                        )}
                        <Switch 
                          checked={feature.enabled}
                          onCheckedChange={() => toggleFeature(feature.id)}
                          disabled={isDependent}
                        />
                      </div>
                    </div>
                  );
                })}
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Feature Configuration Panel */}
        <div className="space-y-6">
          {selectedFeature ? (
            <Card className="bg-card/50 backdrop-blur-sm border-primary/10">
              <CardHeader>
                <CardTitle className="flex items-center">
                  <selectedFeature.icon className="h-5 w-5 mr-2 text-primary" />
                  Configuration
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h3 className="font-medium text-foreground mb-1">{selectedFeature.name}</h3>
                  <p className="text-sm text-muted-foreground">{selectedFeature.description}</p>
                  <Badge className={getCategoryColor(selectedFeature.category)} variant="outline">
                    {selectedFeature.category}
                  </Badge>
                </div>

                <div className="flex items-center justify-between">
                  <Label htmlFor="feature-enabled" className="text-base font-medium">
                    Enabled
                  </Label>
                  <Switch 
                    id="feature-enabled"
                    checked={selectedFeature.enabled}
                    onCheckedChange={() => toggleFeature(selectedFeature.id)}
                  />
                </div>

                {selectedFeature.configurable && selectedFeature.config && (
                  <div className="space-y-4">
                    <h4 className="font-medium text-foreground">Configuration</h4>
                    {Object.entries(selectedFeature.config).map(([key, value]) => (
                      <div key={key}>
                        <Label htmlFor={key} className="capitalize">
                          {key.replace(/([A-Z])/g, ' $1').trim()}
                        </Label>
                        {typeof value === 'boolean' ? (
                          <div className="flex items-center justify-between mt-1">
                            <Switch 
                              id={key}
                              checked={value}
                              onCheckedChange={(checked) => {
                                const newConfig = { ...selectedFeature.config, [key]: checked };
                                updateFeatureConfig(selectedFeature.id, newConfig);
                              }}
                            />
                          </div>
                        ) : typeof value === 'number' ? (
                          <Input 
                            id={key}
                            type="number"
                            value={value}
                            onChange={(e) => {
                              const newConfig = { ...selectedFeature.config, [key]: parseInt(e.target.value) };
                              updateFeatureConfig(selectedFeature.id, newConfig);
                            }}
                            className="bg-background/50 mt-1"
                          />
                        ) : Array.isArray(value) ? (
                          <Textarea 
                            id={key}
                            value={value.join(', ')}
                            onChange={(e) => {
                              const newConfig = { ...selectedFeature.config, [key]: e.target.value.split(', ') };
                              updateFeatureConfig(selectedFeature.id, newConfig);
                            }}
                            className="bg-background/50 mt-1"
                            rows={2}
                          />
                        ) : (
                          <Input 
                            id={key}
                            value={value}
                            onChange={(e) => {
                              const newConfig = { ...selectedFeature.config, [key]: e.target.value };
                              updateFeatureConfig(selectedFeature.id, newConfig);
                            }}
                            className="bg-background/50 mt-1"
                          />
                        )}
                      </div>
                    ))}
                  </div>
                )}

                {selectedFeature.dependencies && (
                  <div>
                    <h4 className="font-medium text-foreground mb-2">Dependencies</h4>
                    <div className="space-y-2">
                      {selectedFeature.dependencies.map(depId => {
                        const dep = features.find(f => f.id === depId);
                        return dep ? (
                          <div key={depId} className="flex items-center justify-between text-sm">
                            <span className="text-muted-foreground">{dep.name}</span>
                            <Badge variant={dep.enabled ? "default" : "secondary"}>
                              {dep.enabled ? 'Enabled' : 'Disabled'}
                            </Badge>
                          </div>
                        ) : null;
                      })}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          ) : (
            <Card className="bg-card/50 backdrop-blur-sm border-primary/10">
              <CardContent className="p-12 text-center">
                <Settings className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-medium text-foreground mb-2">Select a Feature</h3>
                <p className="text-muted-foreground">Click on a feature to view and modify its configuration</p>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
};

export default FeatureToggleManager;